Pr №2 Вариант № 9 Ядыкин Сергей. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Задание №1 Дано вещественное число А и целое число N (> 0). Используя один цикл, вывести все целые степени числа А от 1 до N.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
A = float(input("Enter a real number A: ")) #Введите вещественное число A
N = int(input("Enter an integer N (greater than 0): ")) #Введите целое число N (больше 0)

if N <= 0:
    print("Invalid value of N. Enter an integer greater than 0")#Некорректное значение N. Введите целое число больше 0
else:
    for i in range(1, N+1):
        result = A ** i
        print(f"{A} to the extent of {i} = {result}") #в степени
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Задание №3 У гусей и кроликов вместе 2n лап. Сколько может быть гусей и кроликов (вывести все возможные сочетания)?

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def find_combinations(n):
    combinations = []
    # Цикл проходит по всем возможным значениям количества гусей (от 0 до n) и вычисляет количество кроликов как разность между n и количеством гусей.
    for geese in range(n+1):
        rabbits = n - geese
        # Пара чисел добавляется в список combinations.
        combinations.append((geese, rabbits))
    # Функция возвращает список всех возможных комбинаций гусей и кроликов.
    return combinations

# Основная программа:
# Запрашиваем у пользователя число n.
n = int(input("Enter the number of pairs of paws (n): "))
# Вызываем функцию find_combinations и сохраняем список комбинаций в переменную combinations.
combinations = find_combinations(n)
# Выводим на экран все полученные комбинации гусей и кроликов.
print(f"All possible combinations of geese and rabbits with the number of pairs of paws = {n}:")
for geese, rabbits in combinations:
    # Выводим на экран количество гусей и кроликов в каждой комбинации.
    print(f"Geese: {geese},Rabbits: {rabbits}")
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Задание №2 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import math

def round_round(number, accuracy):
    answer = number / accuracy          #Это определение функции `round_round`, которая округляет число `number` с заданной точностью `accuracy`. Она делит число на точность, применяет функцию `trunc()` из модуля `math` для отбрасывания дробной части и затем умножает результат на точность. Функция возвращает округленное число.
    answer = math.trunc(answer)             
    answer = answer * accuracy
    return answer

def main():
    x = float(input(" x: "))           #Это определение функции `main`. Она запрашивает у пользователя ввод значения `x`, проверяет его находится ли в пределах от -1 до 1, и продолжает запрашивать значение, пока условие не будет выполнено. Затем она запрашивает значение точности `e`.       
    while x > 1 or x < -1:
        print("x [-1;1]")
        x = float(input(" x: "))
    
    e = float(input(": "))

    a = 4.0 * pow(x, 2.0)
    b = pow(2.0 * 1.0 - 1.0, 2.0) * pow(math.pi, 2.0)
    prev = 1.0 - (a / b)                                         #Эти строки вычисляют значения для дальнейших вычислений. Значения `a` и `b` вычисляются по формуле. Затем `prev` инициализируется значением 1 минус отношение `a` к `b`. `iter`, `sum` и `cur` также инициализируются соответствующими значениями.

    iter = 2.0
    sum = prev
    cur = 1.0

    while cur - prev > e:      # Этот цикл выполняется до тех пор, пока разница между `cur` и `prev` больше, чем заданная точность `e`. Внутри цикла присваивается текущее значение `cur` предыдущему значению `prev`, `iter` увеличивается на 1, вычисляются новые значения `a`, `b` и `cur` по формуле, и обновляется значение `sum` путем умножения его на `cur`.
        prev = cur
        iter += 1
        a = 4.0 * pow(x, 2.0)
        b = pow(2.0 * iter - 1.0, 2.0) * pow(math.pi, 2.0)
        cur = 1.0 - (a / b)
        sum = sum * cur

    print(": ", round_round(sum, e))
    print(": ", round_round(math.cos(x), e))
    input("Press Enter to continue")

main()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



****************************************************************************************************************************************************************************************************************************************************
Практические задания (задания разбираются на практических занятиях с 
преподавателем)
*****************************************************************************************************************************************************************************************************************************************************************
Задание №1 1. На тренировке спортсмен ежедневно пробегает некоторую дистанцию, с 
каждым днём увеличивая её на 10%. Составить программу, определяющую по 
расстоянию, преодолённому спортсменом в первый день тренировки, длину дистанции 
на k-й день;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def distance_on_kth_day(initial_distance, k):
    distance = initial_distance
    for _ in range(1, k):
        distance *= 1.1
    return distance

initial_distance = float(input("Enter the distance on the first day of training: "))#Введите расстояние в первый день тренировок

k = int(input("Enter the number of the day for which you want to determine the distance: ")) #Введите номер дня, для которого нужно определить дистанцию

# Вычисление дистанции на k-й день
distance_k = distance_on_kth_day(initial_distance, k)

# Вывод результата
print("Distance on the {}th day of training: {:.2f} km".format(k, distance_k))#Дистанция на {}-й день тренировок: {:.2f} км
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
*****************************************************************************************************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************************************************************************************************
Задание №2 Перевести введённое пользователем десятичное число в двоичное. Известно, 
что число меньше 256.
*****************************************************************************************************************************************************************************************************************************************************************
# Запрос десятичного числа у пользователя
decimal_number = int(input("Enter a decimal number (less than 256): "))#Введите десятичное число (меньше 256)

# Проверка на ограничение числа
if decimal_number >= 256:
    print("The number must be less than 256")#Число должно быть меньше 256
else:
    # Перевод десятичного числа в двоичное
    binary_number = bin(decimal_number)[2:]

    # Вывод результата
    print("Binary representation:", binary_number)#Двоичное представление
*****************************************************************************************************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************************************************************************************************

Задание №3 Разложить натуральное число на простые множители.

*****************************************************************************************************************************************************************************************************************************************************************
# Функция для разложения числа на простые множители
def prime_factors(n):
    factors = []
    divisor = 2

    # Пока число не станет равным 1
    while n > 1:
        # Если число делится без остатка на делитель
        if n % divisor == 0:
            # Добавляем делитель в список множителей
            factors.append(divisor)
            # Делим число на делитель
            n = n // divisor
        else:
            # Увеличиваем делитель, если число не делится на него без остатка
            divisor += 1

    return factors

# Запрос натурального числа у пользователя
number = int(input("Enter a natural number: "))

# Проверка на натуральность числа
if number <= 0:
    print("The number must be natural!")
else:
    # Вызов функции для разложения и вывод результата
    result = prime_factors(number)
    print("Prime factors of a number", number, ":", result)

*****************************************************************************************************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************************************************************************************************

Задание №4 
Население города на 2021 г. насчитывало 620 тыс. человек. Считая темп 
прироста населения за год равным 3,7%, определить, в каком году оно превысит 1,5 млн 
человек.

*****************************************************************************************************************************************************************************************************************************************************************
# Исходные данные
current_population = 620_000
growth_rate = 0.037
target_population = 1_500_000
year = 2021

# Пока население не превышает целевое значение
while current_population <= target_population:
    # Увеличиваем население на прирост за год
    current_population += current_population * growth_rate
    year += 1

print("The population will exceed 1.5 million people in ", year, " year.")



*****************************************************************************************************************************************************************************************************************************************************************
Задание №5 
Найти сумму нечётных делителей введённого с клавиатуры натурального 
числа
*****************************************************************************************************************************************************************************************************************************************************************
num = int(input("Enter a number: "))#Введите число
sum_odd_divisors = 0

for i in range(1, num + 1):
    if num % i == 0 and i % 2 != 0:
        sum_odd_divisors += i

print("Sum of odd divisors:", sum_odd_divisors)#Сумма нечётных делителей

*****************************************************************************************************************************************************************************************************************************************************************
Задание №6
Найти все натуральные числа из отрезка [1; 200], у которых количество 
делителей равно n (где n вводится с клавиатуры)
*****************************************************************************************************************************************************************************************************************************************************************
n = int(input("Enter the number of divisors n: "))#Введите количество делителей n

for num in range(1, 201):   #Этот цикл `for` будет выполняться для чисел в диапазоне от 1 до 200 (201 не включается). Каждое число из этого диапазона будет проверяться на соответствие условию.
    count_divisors = 0

    for i in range(1, num + 1): # Этот цикл `for` будет выполняться для значений `i` от 1 до `num + 1` (включительно). Он проходит по всем числам, начиная с 1 и заканчивая `num`, чтобы проверить, является ли `num` делителем.
        if num % i == 0:  #Если `num` делится на `i` без остатка, то увеличиваем значение `count_divisors` на 1. То есть, если `i` является делителем `num`, то `count_divisors` увеличивается на 1.
            count_divisors += 1

    if count_divisors == n:  #Если количество делителей (`count_divisors`) равно заданному значению `n`, то число `num` выводится на экран.

        print(num)


*****************************************************************************************************************************************************************************************************************************************************************
Задание №7
Найти все четырёхзначные числа, у которых сумма крайних цифр равна 
сумме средних (например, 3221)
*****************************************************************************************************************************************************************************************************************************************************************

for num in range(1000, 10000): #Этот цикл `for` будет выполняться для чисел в диапазоне от 1000 до 9999. Каждое число из этого диапазона будет проверяться на соответствие условию.
    thousands = num // 1000 
    hundreds = (num % 1000) // 100
    tens = (num % 100) // 10
    units = num % 10
    
    if thousands + units == hundreds + tens: #Здесь происходит сравнение сумм разрядов тысяч и единиц с суммой разрядов сотен и десятков числа `num`. Если эти суммы равны, то число выводится на экран.
        print(num)

*****************************************************************************************************************************************************************************************************************************************************************

Задание №8
Найти все двухзначные числа, которые при умножении на 2 заканчиваются 
на 8, а при умножении на 3 – на 4
*****************************************************************************************************************************************************************************************************************************************************************
for i in range(10, 200):   #Этот цикл `for` будет выполняться для чисел в диапазоне от 10 до 199. Каждое число из этого диапазона будет проверяться на соответствие условиям.
    if i * 2 % 10 == 8:     #В этом условном операторе проверяется остаток от деления произведения `i` на 2 на 10. Если остаток равен 8, то будет выполнен блок кода, который выводит сообщение "I = " и значение `i`.
        print("I =", i)
    if i * 3 % 10 == 4:   #В этом условном операторе проверяется остаток от деления произведения `i` на 3 на 10. Если остаток равен 4, то будет выполнен блок кода, который выводит сообщение "J = " и значение `i`.
        print("J =", i)
*****************************************************************************************************************************************************************************************************************************************************************
